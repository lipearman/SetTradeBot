@page "/summary"
@inject IMatToaster Toaster

<h1>Summary</h1>
@if (ohlc == null)
{
    <MatDialog IsOpen="true" CanBeClosed="false">
        <MatDialogContent>
            <h3>
                <span style="padding: 5px; border: 1px solid white;">
                    <MatProgressCircle Indeterminate="true" FourColored="true" />
                    Loading
                </span>
            </h3>
        </MatDialogContent>
    </MatDialog>
}
else
{
    <MatTable Items="@ohlc" class="mat-elevation-z5" FilterByColumnName="Symbol" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortData">
                <MatSortHeader SortId="Symbol" Style="white-space: nowrap">Symbol</MatSortHeader>
                <MatSortHeader SortId="ActionZone" Style="white-space: nowrap">ActionZone</MatSortHeader>
                <th>More...</th>
            </MatSortHeaderRow>

        </MatTableHeader>
        <MatTableRow>
            <td>@context.Symbol</td>
            <td style="white-space: nowrap">@context.ActionZone</td>
            <td><MatButton OnClick="()=>OpenDialog(context)" Raised="true">More...</MatButton></td>
        </MatTableRow>
    </MatTable>


    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>Symbol: @name</MatDialogTitle>
        <MatDialogContent>
            <p>Confirm to add to favorite symbol?</p>
        </MatDialogContent>
        <MatDialogActions>
            <span style="padding: 5px; border: 1px solid white;">
                <MatFAB Icon="@MatIconNames.Close" Label="No Thanks" OnClick="@(e => { dialogIsOpen = false; })"></MatFAB>
            </span>
            <span style="padding: 5px; border: 1px solid white;">
                <MatFAB Icon="@MatIconNames.Favorite" Label="Add to favorites" OnClick="@OkClick"></MatFAB>
            </span>
        </MatDialogActions>
    </MatDialog>
}


@code {
    Ohlc[] ohlc;
    HttpClient HttpClient;

    bool dialogIsOpen = false;
    string name = null;
    string animal = null;
    string dialogAnimal = null;

    void OpenDialog(Ohlc ohlc)
    {
        name = ohlc.Symbol;

        _message = name;
        _title = "Add To Favorite Symbol";

        dialogAnimal = null;
        dialogIsOpen = true;
    }
    void OkClick()
    {

        Show(MatToastType.Success);

        animal = dialogAnimal;
        dialogIsOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        HttpClient = new HttpClient();
        var jsdata = await HttpClient.GetStringAsync($"https://script.google.com/macros/s/AKfycbxe6QG2n8IRTWyv4nFMl3UMeUKp-6_i0wQlDbIVkN2xOC59f5jB-gYz1Q/exec?id=1");
        var data = jsdata.ToString().Substring(1, jsdata.ToString().Length - 2).Replace("\\", "");
        ohlc = JsonConvert.DeserializeObject<Ohlc[]>(data);
    }


    void SortData(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            //Comparison<Ohlc> comparison = null;
            switch (sort.SortId)
            {
                case "Symbol":
                    //comparison = (s1, s2) => string.Compare(s1.Symbol, s2.Symbol, StringComparison.InvariantCultureIgnoreCase);
                    if (sort.Direction == MatSortDirection.Desc)
                    {
                        ohlc = ohlc.OrderByDescending(x => x.Symbol).ToArray();
                    }
                    else
                    {
                        ohlc = ohlc.OrderBy(x => x.Symbol).ToArray();
                    }
                    break;
                case "ActionZone":
                    //comparison = (s1, s2) => string.Compare(s1.ActionZone, s2.ActionZone, StringComparison.InvariantCultureIgnoreCase);
                    if (sort.Direction == MatSortDirection.Desc)
                    {
                        ohlc = ohlc.OrderByDescending(x => x.ActionZone).ToArray();
                    }
                    else
                    {
                        ohlc = ohlc.OrderBy(x => x.ActionZone).ToArray();
                    }
                    break;
            }

        }
    }


    private string _title = "";
    private string _message = "";
    private bool _actionOnClick;


    public void Show(MatToastType type, string icon = "")
    {
        Toaster.Configuration.Position = MatToastPosition.BottomCenter;

        Toaster.Add(_message, type, _title, icon, config =>
        {
            if (_actionOnClick)
            {
                config.Onclick = toast =>
                {
                    return Task.CompletedTask;
                };
            }
        });
    }
}
