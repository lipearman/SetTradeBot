@page "/set50"
@inject IMatToaster Toaster
@inject NavigationManager NavManager

<h1> SET50 @lastdate </h1>
@if (ohlc == null)
{
    <MatProgressCircle Indeterminate="true" FourColored="true" />
    <h3 class="mat-subtitle1">Loading</h3>
}
else
{
    <MatTable Items="@ohlc" class="mat-elevation-z5" FilterByColumnName="Symbol" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortData">
                <MatSortHeader SortId="Symbol" Style="white-space: nowrap">Symbol</MatSortHeader>
                <MatSortHeader SortId="Close" Style="white-space: nowrap">Marget</MatSortHeader>
                <MatSortHeader SortId="Volume" Style="white-space: nowrap">Volume</MatSortHeader>
                <MatSortHeader SortId="Value" Style="white-space: nowrap">Value</MatSortHeader>
                <MatSortHeader SortId="RSI_Signal" Style="white-space: nowrap">Momentum</MatSortHeader>
            </MatSortHeaderRow>

        </MatTableHeader>
        <MatTableRow>
            <td><MatButton OnClick="()=>OpenDialog(context)" Raised="true" Style="width:100px">@context.Symbol</MatButton></td>

            <td style="white-space: nowrap">@String.Format("{0:n2}", @context.Close)</td>
            <td style="white-space: nowrap">@String.Format("{0:n0}", @context.Volume)</td>
            <td style="white-space: nowrap">@String.Format("{0:n2}", @context.Value)</td>
            <td style="white-space: nowrap">@context.RSI_Signal</td>
        </MatTableRow>
    </MatTable>


    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>@ItemSelected.Name</MatDialogTitle>
        <MatDialogContent>
            <h4 class="mt-3">Market (@ItemSelected.Close.ToString())</h4>
            <MatChipSet>
                <MatChip Label="@($"Open:{ItemSelected.Open.ToString()}")"></MatChip>
                <MatChip Label="@($"Low:{ItemSelected.Low.ToString()}")"></MatChip>
                <MatChip Label="@($"High:{ItemSelected.High.ToString()}")"></MatChip>
                <MatChip Label="@($"Previous:{ItemSelected.AdjClose.ToString()}")"></MatChip>
                <MatChip Label="@($"Value:{String.Format("{0:n2}",ItemSelected.Value)}")"></MatChip>
                <MatChip Label="@($"Volume:{String.Format("{0:n0}",ItemSelected.Volume)}")"></MatChip>
                @if (!String.IsNullOrEmpty(ItemSelected.Change))
                {<MatChip Label="@($"Change:{ItemSelected.Change.ToString()}/{String.Format("{0:p2}",ItemSelected.PChange.ToString())}")"></MatChip>}
                <MatChip Label="@($"Exit:{ItemSelected.ChandelierExit.ToString()}")"></MatChip>
            </MatChipSet>


            <h4 class="mt-3">Signal</h4>
            <MatChipSet>
                @if (!String.IsNullOrEmpty(ItemSelected.BuySell_Signal))
                {<MatChip Label="@ItemSelected.BuySell_Signal"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.EMA200_signal))
                {<MatChip Label="@ItemSelected.EMA200_signal"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.ActionZone))
                {<MatChip Label="@ItemSelected.ActionZone"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.Fractal_Marget))
                {<MatChip Label="@ItemSelected.Fractal_Marget"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.MA))
                {<MatChip Label="@ItemSelected.MA"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.SuperTrend_Signal))
                {<MatChip Label="@ItemSelected.SuperTrend_Signal"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.RSI_Signal))
                {<MatChip Label="@ItemSelected.RSI_Signal"></MatChip>}

            </MatChipSet>

            <h4 class="mt-3">Indicators</h4>
            <MatChipSet>
                <MatChip Label="@($"RSI:{ItemSelected.RSI.ToString()}")"></MatChip>
                <MatChip Label="@($"MACD:{ItemSelected.MACDSignal.ToString()}/{ItemSelected.MACDLine.ToString()}")"></MatChip>
                <MatChip Label="@($"EMA12:{ItemSelected.EMA12.ToString()}")"></MatChip>
                <MatChip Label="@($"EMA26:{ItemSelected.EMA26.ToString()}")"></MatChip>
                <MatChip Label="@($"EMA200:{ItemSelected.EMA200.ToString()}")"></MatChip>
            </MatChipSet>

            <h4 class="mt-3">SR (@ItemSelected.PP)</h4>
            <MatChipSet>
                <MatChip Label="@($"SR1:{ItemSelected.S1.ToString()}/{ItemSelected.R1.ToString()}")" IsCheckable="true" IsSelected="@(ItemSelected.Close >= ItemSelected.S1 && ItemSelected.Close<= ItemSelected.R1)"></MatChip>
                <MatChip Label="@($"SR2:{ItemSelected.S2.ToString()}/{ItemSelected.R2.ToString()}")" IsCheckable="true" IsSelected="@(ItemSelected.Close >= ItemSelected.S2 && ItemSelected.Close <= ItemSelected.R2)"></MatChip>
                <MatChip Label="@($"SR3:{ItemSelected.S3.ToString()}/{ItemSelected.R3.ToString()}")" IsCheckable="true" IsSelected="@(ItemSelected.Close >= ItemSelected.S3 && ItemSelected.Close <= ItemSelected.R3)"></MatChip>
            </MatChipSet>

        </MatDialogContent>
        <MatDialogActions>
            <span style="padding: 5px; border: 1px solid white;">
                <MatFAB Icon="@MatIconNames.Link" Label="Website" OnClick="()=>OpenLink(ItemSelected.Symbol)"></MatFAB>
            </span>

            <span style="padding: 5px; border: 1px solid white;">
                <MatFAB Icon="@MatIconNames.Favorite" Label="Add to favorites" OnClick="@OkClick"></MatFAB>
            </span>

            <span style="padding: 5px; border: 1px solid white;">
                <MatFAB Icon="@MatIconNames.Close" Label="Close" OnClick="@(e => { dialogIsOpen = false; })"></MatFAB>
            </span>
        </MatDialogActions>
    </MatDialog>
}


@code {
    Ohlc[] ohlc;
    HttpClient HttpClient;

    Ohlc ItemSelected = new Ohlc();
    bool dialogIsOpen = false;
    string animal = null;
    string dialogAnimal = null;
    string lastdate = null;

    void OpenDialog(Ohlc ohlc)
    {
        ItemSelected = new Ohlc();

        ItemSelected = ohlc;

        _title = ItemSelected.Symbol;
        _message = "Added To Favorite";

        dialogAnimal = null;
        dialogIsOpen = true;
    }

    void OpenLink(string symbol)
    {
        var url = $"https://www.settrade.com/C04_01_stock_quote_p1.jsp?txtSymbol={symbol}";

        NavManager.NavigateTo(url, forceLoad: true);
    }

    void OkClick()
    {

        Show(MatToastType.Success);

        animal = dialogAnimal;
        dialogIsOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        HttpClient = new HttpClient();
        var jsdata = await HttpClient.GetStringAsync($"https://script.google.com/macros/s/AKfycbxe6QG2n8IRTWyv4nFMl3UMeUKp-6_i0wQlDbIVkN2xOC59f5jB-gYz1Q/exec?id=1");
        var data = jsdata;//.ToString().Substring(1, jsdata.ToString().Length - 2).Replace("\\", "");
        ohlc = JsonConvert.DeserializeObject<Ohlc[]>(data);

        lastdate = $"({ohlc[0].Date.ToString("dd/MM/yyyy HH:mm")})";
    }


    void SortData(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            //Comparison<Ohlc> comparison = null;
            switch (sort.SortId)
            {
                case "Symbol":
                    //comparison = (s1, s2) => string.Compare(s1.Symbol, s2.Symbol, StringComparison.InvariantCultureIgnoreCase);
                    if (sort.Direction == MatSortDirection.Desc)
                    {
                        ohlc = ohlc.OrderByDescending(x => x.Symbol).ToArray();
                    }
                    else
                    {
                        ohlc = ohlc.OrderBy(x => x.Symbol).ToArray();
                    }
                    break;
                case "Close":
                    //comparison = (s1, s2) => string.Compare(s1.ActionZone, s2.ActionZone, StringComparison.InvariantCultureIgnoreCase);
                    if (sort.Direction == MatSortDirection.Desc)
                    {
                        ohlc = ohlc.OrderByDescending(x => x.Close).ToArray();
                    }
                    else
                    {
                        ohlc = ohlc.OrderBy(x => x.Close).ToArray();
                    }
                    break;
                case "Volume":
                    //comparison = (s1, s2) => string.Compare(s1.ActionZone, s2.ActionZone, StringComparison.InvariantCultureIgnoreCase);
                    if (sort.Direction == MatSortDirection.Desc)
                    {
                        ohlc = ohlc.OrderByDescending(x => x.Volume).ToArray();
                    }
                    else
                    {
                        ohlc = ohlc.OrderBy(x => x.Volume).ToArray();
                    }
                    break;
                case "Value":
                    //comparison = (s1, s2) => string.Compare(s1.ActionZone, s2.ActionZone, StringComparison.InvariantCultureIgnoreCase);
                    if (sort.Direction == MatSortDirection.Desc)
                    {
                        ohlc = ohlc.OrderByDescending(x => x.Value).ToArray();
                    }
                    else
                    {
                        ohlc = ohlc.OrderBy(x => x.Value).ToArray();
                    }
                    break;
                case "RSI_Signal":
                    //comparison = (s1, s2) => string.Compare(s1.ActionZone, s2.ActionZone, StringComparison.InvariantCultureIgnoreCase);
                    if (sort.Direction == MatSortDirection.Desc)
                    {
                        ohlc = ohlc.OrderByDescending(x => x.RSI_Signal).ToArray();
                    }
                    else
                    {
                        ohlc = ohlc.OrderBy(x => x.RSI_Signal).ToArray();
                    }
                    break;
            }

        }
    }


    private string _title = "";
    private string _message = "";
    private bool _actionOnClick;


    public void Show(MatToastType type, string icon = "")
    {
        Toaster.Configuration.Position = MatToastPosition.BottomCenter;

        Toaster.Add(_message, type, _title, icon, config =>
        {
            if (_actionOnClick)
            {
                config.Onclick = toast =>
                {
                    return Task.CompletedTask;
                };
            }
        });
    }
}
