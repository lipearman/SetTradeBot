@page "/Favorite"
@inject IMatToaster Toaster
@inject NavigationManager NavManager
@inject ILiffClient Liff
@inject IJSRuntime JSRuntime

<h1> Favorite </h1>
@if (Favorites == null)
{
    <MatProgressCircle Indeterminate="true" FourColored="true" />
    <h3 class="mat-subtitle1">Loading</h3>
}
else
{
    <MatTable Items="@Favorites" class="mat-elevation-z5" PageSize="50" ShowPaging="false" FilterByColumnName="symbol" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortData">
                <MatSortHeader SortId="Symbol" Style="white-space: nowrap">Symbol</MatSortHeader>
                <th>Notice Me</th>
            </MatSortHeaderRow>

        </MatTableHeader>
        <MatTableRow>
            <td><MatButton OnClick="()=>OpenDialog(context)" Raised="true" Style="width:100px">@context.symbol</MatButton></td>
            <td style="white-space: nowrap"><MatSlideToggle TValue="bool" Value="@context.active" ValueChanged="@(e=>Toggle(e,context))"></MatSlideToggle></td>
        </MatTableRow>
    </MatTable>


    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogTitle>@ItemSelected.Name</MatDialogTitle>
        <MatDialogContent>
            <h4 class="mt-3">Market (@ItemSelected.Close.ToString())</h4>
            <MatChipSet>
                <MatChip Label="@($"Open:{ItemSelected.Open.ToString()}")"></MatChip>
                <MatChip Label="@($"Low:{ItemSelected.Low.ToString()}")"></MatChip>
                <MatChip Label="@($"High:{ItemSelected.High.ToString()}")"></MatChip>
                <MatChip Label="@($"Previous:{ItemSelected.AdjClose.ToString()}")"></MatChip>
                <MatChip Label="@($"Value:{String.Format("{0:n2}",ItemSelected.Value)}")"></MatChip>
                <MatChip Label="@($"Volume:{String.Format("{0:n0}",ItemSelected.Volume)}")"></MatChip>
                @if (!String.IsNullOrEmpty(ItemSelected.Change))
                {<MatChip Label="@($"Change:{ItemSelected.Change.ToString()}/{String.Format("{0:p2}",ItemSelected.PChange.ToString())}")"></MatChip>}
                <MatChip Label="@($"Exit:{ItemSelected.ChandelierExit.ToString()}")"></MatChip>
            </MatChipSet>


            <h4 class="mt-3">Signal</h4>
            <MatChipSet>
                @if (!String.IsNullOrEmpty(ItemSelected.BuySell_Signal))
                {<MatChip Label="@ItemSelected.BuySell_Signal"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.EMA200_signal))
                {<MatChip Label="@ItemSelected.EMA200_signal"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.ActionZone))
                {<MatChip Label="@ItemSelected.ActionZone"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.Fractal_Marget))
                {<MatChip Label="@ItemSelected.Fractal_Marget"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.MA))
                {<MatChip Label="@ItemSelected.MA"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.SuperTrend_Signal))
                {<MatChip Label="@ItemSelected.SuperTrend_Signal"></MatChip>}
                @if (!String.IsNullOrEmpty(ItemSelected.RSI_Signal))
                {<MatChip Label="@ItemSelected.RSI_Signal"></MatChip>}

            </MatChipSet>

            <h4 class="mt-3">Indicators</h4>
            <MatChipSet>
                <MatChip Label="@($"RSI:{ItemSelected.RSI.ToString()}")"></MatChip>
                <MatChip Label="@($"MACD:{ItemSelected.MACDSignal.ToString()}/{ItemSelected.MACDLine.ToString()}")"></MatChip>
                <MatChip Label="@($"EMA12:{ItemSelected.EMA12.ToString()}")"></MatChip>
                <MatChip Label="@($"EMA26:{ItemSelected.EMA26.ToString()}")"></MatChip>
                <MatChip Label="@($"EMA200:{ItemSelected.EMA200.ToString()}")"></MatChip>
            </MatChipSet>

            <h4 class="mt-3">SR (@ItemSelected.PP)</h4>
            <MatChipSet>
                <MatChip Label="@($"SR1:{ItemSelected.S1.ToString()}/{ItemSelected.R1.ToString()}")" IsCheckable="true" IsSelected="@(ItemSelected.Close >= ItemSelected.S1 && ItemSelected.Close<= ItemSelected.R1)"></MatChip>
                <MatChip Label="@($"SR2:{ItemSelected.S2.ToString()}/{ItemSelected.R2.ToString()}")" IsCheckable="true" IsSelected="@(ItemSelected.Close >= ItemSelected.S2 && ItemSelected.Close <= ItemSelected.R2)"></MatChip>
                <MatChip Label="@($"SR3:{ItemSelected.S3.ToString()}/{ItemSelected.R3.ToString()}")" IsCheckable="true" IsSelected="@(ItemSelected.Close >= ItemSelected.S3 && ItemSelected.Close <= ItemSelected.R3)"></MatChip>
            </MatChipSet>

        </MatDialogContent>
        <MatDialogActions>

            <span style="padding: 5px; border: 1px solid white;">
                <MatFAB Icon="@MatIconNames.Bar_chart" Label="TRADINGVIEW" OnClick="()=>OpenLinkTradingView(ItemSelected.Symbol)"></MatFAB>
            </span>
            <span style="padding: 5px; border: 1px solid white;">
                <MatFAB Icon="@MatIconNames.Link" Label="SETTRADE" OnClick="()=>OpenLinkSetTrade(ItemSelected.Symbol)"></MatFAB>
            </span>

            <span style="padding: 5px; border: 1px solid white;">
                <MatFAB Icon="@MatIconNames.Close" Label="Close" OnClick="@(e => { dialogIsOpen = false; })"></MatFAB>
            </span>


        </MatDialogActions>
    </MatDialog>
}


@code {
    Ohlc[] ohlc;
    SetTradeBot.Model.Favorite[] Favorites;
    Ohlc ItemSelected = new Ohlc();
    bool dialogIsOpen = false;
    string animal = null;

    protected Profile Profile { get; set; }
    protected LiffContext Context { get; set; }
    protected string TokenId { get; set; }
    protected string OS { get; set; }
    protected string Language { get; set; }
    protected string Version { get; set; }
    protected string IDToken { get; set; }
    protected string LineVersion { get; set; }
    protected Friendship Friendship { get; set; }

    async Task OpenDialog(Model.Favorite Favorite)
    {


        if (ohlc.Count() > 0)
        {
            ItemSelected = ohlc.Where(x => x.Symbol == Favorite.symbol).FirstOrDefault();
            dialogIsOpen = true;
        }
    }

    async Task Toggle(bool toggled, Model.Favorite Favorite)
    {
        Favorite.active = toggled;
        await SetTradeBot.Services.GoogleAPI.UpdateFavoriteActive(Favorite);
    }


    void OpenLinkTradingView(string symbol)
    {
        var url = $"https://th.tradingview.com/chart/?symbol=SET%3A{symbol}";

        NavManager.NavigateTo(url, forceLoad: true);
    }
    void OpenLinkSetTrade(string symbol)
    {
        var url = $"https://www.settrade.com/C04_01_stock_quote_p1.jsp?txtSymbol={symbol}";

        NavManager.NavigateTo(url, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {


        //try
        //{
        if (!Liff.Initialized)
        {
            await Liff.Init(JSRuntime);
            if (!await Liff.IsLoggedIn())
            {
                await Liff.Login();
                return;
            }
            Liff.Initialized = true;
        }
        Profile = await Liff.GetProfile();
        if (await Liff.IsInClient())
        {
            Context = await Liff.GetContext();

        }
        var idtoken = await Liff.GetDecodedIDToken();
        TokenId = idtoken.Sub;
        OS = await Liff.GetOS();
        Language = await Liff.GetLanguage();
        Version = await Liff.GetVersion();
        LineVersion = await Liff.GetLineVersion();
        //Friendship = await Liff.GetFriendship();
        IDToken = await Liff.GetIDToken();


        StateHasChanged();



        ohlc = await SetTradeBot.Services.GoogleAPI.GetAllSET();


        Favorites = await SetTradeBot.Services.GoogleAPI.GetAllFavorite(Context.UserId);





        //}
        //catch (Exception e)
        //{
        //    //Profile = null;
        //    await JSRuntime.InvokeAsync<object>("alert", e.ToString());
        //}


    }


    void SortData(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            switch (sort.SortId)
            {
                case "Symbol":
                    if (sort.Direction == MatSortDirection.Desc)
                    {
                        Favorites = Favorites.OrderByDescending(x => x.symbol).ToArray();
                    }
                    else
                    {
                        Favorites = Favorites.OrderBy(x => x.symbol).ToArray();
                    }
                    break;

            }

        }
    }

}